generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(auto()) @map("_id") @db.ObjectId
  email                String         @unique              // Email yêu cầu khi đăng ký
  password             String                              // Mật khẩu của người dùng
  phone                String?                             // Số điện thoại, có thể bổ sung sau
  companyName          String?                             // Tên công ty
  address              String?                             // Địa chỉ công ty
  businessCode         String?                             // Mã kinh doanh
  taxCode              String?                             // Mã số thuế
  representativeName   String?                             // Tên người đại diện
  representativeUrl    String?                             // Ảnh CCCD của người đại diện
  profilePictureUrl    String?                             // Ảnh đại diện công ty
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  posts                Post[]         @relation("UserPosts") // Quan hệ với các bài đăng của người dùng
  notifications        Notification[]                     // Quan hệ với thông báo
  ratings              Rating[]       @relation("UserRatings") // Quan hệ với đánh giá
 conversationsSent    Conversation[]  @relation("UserConversationsSent") // Các cuộc hội thoại đã gửi
  conversationsReceived Conversation[] @relation("UserConversationsReceived") // Các cuộc hội thoại đã nhận
  messages             Message[]       @relation("MessageSender") // Quan hệ với các tin nhắn đã gửi
}

model Post {
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  user                 User         @relation("UserPosts", fields: [userId], references: [id]) // Người đăng bài
  userId               String       @db.ObjectId
  postType             PostType     // Loại bài đăng: Ghép hàng, Tìm vận chuyển, Cung cấp vận chuyển
  status               PostStatus   // Trạng thái bài đăng: hoạt động, đã ghép đôi, đã hoàn tất
  companyImageUrl      String?
  companyName          String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  // Các trường chung cho tất cả loại bài đăng
  origin               String?      // Nơi bắt đầu vận chuyển
  destination          String?      // Nơi kết thúc vận chuyển
  transportTime        DateTime?    // Thời gian vận chuyển dự kiến
  returnTrip           Boolean?     // Chuyến khứ hồi (chỉ cho Cung cấp vận chuyển)
  returnTime           DateTime?    // Thời gian khứ hồi nếu có (chỉ cho Cung cấp vận chuyển)

  // Trường cho bài đăng Ghép hàng
  hasVehicle           Boolean?     // Có xe hoặc chưa có xe
  cargoType            String?      // Loại hàng hóa
  cargoWeight          Float?       // Khối lượng hàng hóa
  cargoVolume          Float?       // Thể tích hàng hóa
  specialRequirements  String?      // Yêu cầu đặc biệt cho hàng hóa

  // Trường cho bài đăng Tìm vận chuyển
  requiredVehicleType  String?      // Loại xe yêu cầu
  cargoTypeRequest     String?      // Loại hàng hóa

  // Trường cho bài đăng Cung cấp vận chuyển
  vehicleType          String?      // Loại xe
  vehicleCapacity      Float?       // Trọng tải tối đa của xe
  availableWeight      Float?       @default(0) // Trọng tải còn lại có thể ghép
  pricePerUnit         Float?       // Giá tính theo kg hoặc tấn
  vehicleDetails       String?      // Chi tiết về phương tiện
  conversations        Conversation[] @relation("PostConversations") // Thêm quan hệ với Conversation


}


model Conversation {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  postId         String?      @db.ObjectId
  post           Post?        @relation("PostConversations", fields: [postId], references: [id]) // Bài đăng liên quan nếu có
  senderId       String       @db.ObjectId
  sender         User         @relation("UserConversationsSent", fields: [senderId], references: [id]) // Người bắt đầu cuộc hội thoại
  receiverId     String       @db.ObjectId
  receiver       User         @relation("UserConversationsReceived", fields: [receiverId], references: [id]) // Người nhận cuộc hội thoại
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  messages       Message[]    @relation("ConversationMessages") // Danh sách tin nhắn trong cuộc hội thoại
}

model Message {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String        @db.ObjectId
  conversation   Conversation  @relation("ConversationMessages", fields: [conversationId], references: [id])
  senderId       String        @db.ObjectId
  sender         User          @relation("MessageSender", fields: [senderId], references: [id])
  content        String        // Nội dung tin nhắn
  createdAt      DateTime      @default(now())
}


model Notification {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  user                 User     @relation(fields: [userId], references: [id]) // Người nhận thông báo
  userId               String   @db.ObjectId
  message              String   // Nội dung thông báo
  read                 Boolean  @default(false) // Đã đọc hay chưa
  createdAt            DateTime @default(now())
}

model Rating {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  matchId              String   @db.ObjectId
  rating               Int      // Số điểm đánh giá
  comment              String?  // Nhận xét nếu có
  createdAt            DateTime @default(now())
  user                 User     @relation("UserRatings", fields: [userId], references: [id]) // Người thực hiện đánh giá
  userId               String   @db.ObjectId
}

model Otp {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  email                String   @unique // Email người dùng nhận OTP
  otp                  String   // Mã OTP
  password             String   // Mật khẩu cho OTP
  createdAt            DateTime @default(now())
  expiresAt            DateTime // Thời gian hết hạn OTP
}

model OtpForgotPassword {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  email                String   @unique // Email người dùng nhận OTP quên mật khẩu
  otp                  String   // Mã OTP
  createdAt            DateTime @default(now())
  expiresAt            DateTime // Thời gian hết hạn OTP
}

model Token {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  token                String   @unique // Token để reset mật khẩu
  email                String   // Email liên quan đến token
  createdAt            DateTime @default(now())
  expiresAt            DateTime // Thời gian hết hạn token
}

// Các enum cho các trạng thái và loại dữ liệu
enum PostType {
  CargoMatching           // Ghép hàng
  LookingForTransport     // Tìm vận chuyển
  OfferingTransport       // Cung cấp vận chuyển
}

enum PostStatus {
  active
  completed
}

enum MatchStatus {
  pending
  confirmed
  completed
  cancelled
}


