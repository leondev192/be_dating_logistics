generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  email        String         @unique              // Chỉ yêu cầu email khi đăng ký
  password     String                              // Mật khẩu của người dùng
  phone        String?                             // Số điện thoại có thể bổ sung sau
  role         Role?                               // Vai trò sẽ được bổ sung sau khi người dùng chọn trên màn hình thông tin
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  company      Company?                            // Quan hệ một-một với Company
  posts        Post[]         @relation("UserPosts")
  matches      Match[]        @relation("UserMatches")
  chats        Chat[]
  notifications Notification[]
  ratings      Rating[]       @relation("UserRatings")
}

model Company {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  user                 User    @relation(fields: [userId], references: [id])
  userId               String  @unique @db.ObjectId   // Thêm @unique để định nghĩa quan hệ one-to-one
  companyName          String?                         // Tên công ty bổ sung sau khi đăng ký
  address              String?                         // Địa chỉ công ty
  businessCode         String?                         // Mã kinh doanh
  taxCode              String?                         // Mã số thuế
  representativeName   String?                         // Tên người đại diện
  representativeUrl     String?                         // ảnh CCCD của người đại diện
  profilePictureUrl    String?                         // Ảnh đại diện công ty nếu có
  posts                Post[]
}

model Post {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  company       Company   @relation(fields: [companyId], references: [id])
  companyId     String    @db.ObjectId
  postType      PostType  // Loại bài đăng: yêu cầu (request) hoặc cung cấp dịch vụ (offer)
  cargoType     String?   // Loại hàng hóa
  vehicleType   String?   // Loại xe
  quantity      Float?    // Số lượng hàng hóa
  origin        String?   // Nơi bắt đầu vận chuyển
  destination   String?   // Nơi kết thúc vận chuyển
  transportTime DateTime? // Thời gian vận chuyển dự kiến
  status        PostStatus // Trạng thái bài đăng: hoạt động, đã ghép đôi, đã hoàn tất
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  matches       Match[]   @relation("PostMatches")
  matchedPosts  Match[]   @relation("MatchedPostMatches")
  user          User      @relation("UserPosts", fields: [userId], references: [id])
  userId        String    @db.ObjectId
}

model Match {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  post        Post     @relation("PostMatches", fields: [postId], references: [id])
  postId      String   @db.ObjectId
  matchedPost Post     @relation("MatchedPostMatches", fields: [matchedPostId], references: [id])
  matchedPostId String @db.ObjectId
  status      MatchStatus // Trạng thái ghép đôi: đang chờ, đã xác nhận, hoàn tất, hủy
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chats       Chat[]
  ratings     Rating[] @relation("MatchRatings")
  user        User     @relation("UserMatches", fields: [userId], references: [id])
  userId      String   @db.ObjectId
}

model Chat {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  match      Match    @relation(fields: [matchId], references: [id])
  matchId    String   @db.ObjectId
  message    String
  sender     User     @relation(fields: [senderId], references: [id])
  senderId   String   @db.ObjectId
  createdAt  DateTime @default(now())
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  match     Match    @relation("MatchRatings", fields: [matchId], references: [id])
  matchId   String   @db.ObjectId
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation("UserRatings", fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

model Otp {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String   @unique
  otp        String
  password   String
  createdAt  DateTime @default(now())
  expiresAt  DateTime // thời gian hết hạn OTP
}

model OtpForgotPassword {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String   @unique
  otp        String
  createdAt  DateTime @default(now())
  expiresAt  DateTime // thời gian hết hạn OTP
}

model Token {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  email      String
  createdAt  DateTime @default(now())
  expiresAt  DateTime // thời gian hết hạn token để reset password
}

// Các enum cho các trạng thái và loại dữ liệu
enum Role {
  logistics
  customer
  carrier
}

enum PostType {
  request
  offer
}

enum PostStatus {
  active
  matched
  completed
}

enum MatchStatus {
  pending
  confirmed
  completed
  cancelled
}
